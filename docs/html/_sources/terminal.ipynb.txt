{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# The Terminal"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It's probably good to start by answering the question: What *is* the terminal?\n",
    "\n",
    "The terminal is a way to talk to your operating system (e.g. macOS, Windows, etc.) using text instead of by moving around a mouse and clicking on things. Just as you can use your mouse to open folders, move and rename files, and launch programs, so too can you use the terminal to ask you operating system to do the same things. \n",
    "\n",
    "\n",
    "## Terminology\n",
    "\n",
    "Before we get into the details of the terminal, though, a note on terminology: there are *lots* of names that float around that basically mean the same thing, including terminal, shell, command line, and bash. In this tutorial, the specific program we will be using is called `bash`. But if you're working on a Mac, you'd never know you were using `bash` because Apple calls bash `Terminal`. Also, `bash` is based on a program called `shell`, so you may also hear the term `shell` used to describe the tool we'll be using today. But for all intents and purposes, the terms `bash`, `command line`, `Terminal`, and `shell` are basically interchangeable on a mac or linux computer.\n",
    "\n",
    "We're using `bash` because it's the default terminal program on nearly all Macs and Linux computers (the operating systems of Mac and Linux computers are very similar, and are often just referred to as POSIX computers). That's important, because almost all computers in the cloud run Linux (including not just companies like Amazon Web Services, but also university research clusters). And if you want to work directly with a computer in the cloud, you will almost never get to use a pretty graphical user interface, so you'll *have* to use a terminal, making `bash` a great choice to learn on. \n",
    "\n",
    "The one place this equivalence breaks down is on Windows. On windows, the program used for interacting with the computer via text is called `DOS` or `CMD` which is similar to `bash`, but has a different syntax. But to make this confusing, this will also sometimes be referred to as \"the terminal\" or \"command line\". If you're working with Windows, click here for your options (Will add link to cygwin here https://cygwin.com/install.html ).\n",
    "\n",
    "So in summary:\n",
    "\n",
    "- `bash` and `shell`: two (almost identical) programs for talking to you computer via text. Standard on Mac and Linux Systems. \n",
    "- `terminal`: sometimes used colloquially to refer to any system that lets you talk to you computer via text, but also the name Apple uses when you run `bash`. \n",
    "- `DOS` and `CMD`: Window's version of `bash` and `shell`. Same purpose, different syntax. \n",
    "\n",
    "## But if it's just like using my mouse to click pictures, why do I need the command line?\n",
    "\n",
    "There are three main reasons to learn to use the command line. \n",
    "\n",
    "1) **More tools are available through the command line than through graphical user interface.** It turns out that it takes a lot of work to make a program that has pretty icons and windows that pop up, so lots of people make tools but don't bother to make pretty graphical interfaces. This is especially true for free and open-source software. So by learning to use the command line, you gain access to *lots* of powerful tools that would otherwise be unavailable.\n",
    "\n",
    "2) **You won't always have a graphical interface.** If your work ever requires you to use a remote server with, say, more computing power, those systems probably won't offer a graphical user interface. \n",
    "\n",
    "3) **Sometimes you want to do something OVER AND OVER.** Renaming a file by clicking on it, deleting the name, typing in a new name, and hitting return is great if you only need to rename one file. But what if you want to rename hundreds? The command line gives you the ability to write little scripts to do this kind of work for you. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Learning the Command Line\n",
    "\n",
    "Once you have a sense of what the command line is about, I recommend you try out [this tutorial (\"Introduction to Shell for Data Science\")](https://www.datacamp.com/courses/introduction-to-shell-for-data-science) to get some experience working with it (the command line is used enough that people have already created great tutorials -- I won't insult their work by trying to re-create them). I think the first section (\"Manipulating Files and Directories\") will give you a pretty good sense of what's going on, and may be all you need to be read to take on whatever specific task you have in mind. Or keep going if you want to learn more!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Making the Command Line Friendlier\n",
    "\n",
    "OK, the basic command line is ugly, and doesn't offer much of an interface. That's why I recommend installing a slightly nicer program like [Oh My Z!](https://ohmyz.sh/) that causes your terminal to offer slightly more information than the default shell, especially if you use git. For example:\n",
    "\n",
    "Default Terminal:\n",
    "\n",
    "![bash](images/default_shell.png)\n",
    "\n",
    "With Oh My Z!:\n",
    "\n",
    "![zsh](images/zsh.png)\n",
    "\n",
    "See how it now shows the folder I'm in on the left; shows that I'm in a git project when I navigate into `programming4ds` and tells me the branch (don't worry if that doesn't mean much to you), and highlights folders in blue so you can tell what's a folder and what's a file? Just helps keep you sane. :)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Bash",
   "language": "bash",
   "name": "bash"
  },
  "language_info": {
   "codemirror_mode": "shell",
   "file_extension": ".sh",
   "mimetype": "text/x-sh",
   "name": "bash"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
