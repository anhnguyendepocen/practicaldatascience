{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Variables as Pointers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## But what are pointers *really*?\n",
    "\n",
    "Imagine an old woman sitting in a small room. She is *very* smart --- if you give her a math problem she can do it almost instantly --- but she's also really bad a multi-tasking, and has a terrible memory. In fact, she can only remember about 16 numbers at a time. \n",
    "\n",
    "This old woman is your processor. And I'm not joking about only remembering 16 numbers at a time -- that's all your processor has immediate access to: 16 numbers in tiny memory banks called \"registers\".  \n",
    "\n",
    "Outside the room where this woman sits is a vast library with shelves upon shelves of books. The woman knows this library exists, but certainly has no way of remembering where everything is. This is your computer memory. \n",
    "\n",
    "The woman is assisted by a small team of children. If the woman wants a book, she can give a child the call-number of a book, and the child can go get it. But she has to know the call number first. This is the process of retreiving data from memory -- if the processor wants to, say, modify a variable, she has to first get the memory address of the variable, then send a child to go get it. And this can take a *lot* of time compared to how long it takes for the woman to do actual calculations. \n",
    "\n",
    "Finally, when there's a job to be done, the woman is given a big book of instructions. This is the code she's being asked to execute. This code will often provide the call-numbers the woman needs to start a job, allowing her to get started."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Julia 1.0.3",
   "language": "julia",
   "name": "julia-1.0"
  },
  "language_info": {
   "file_extension": ".jl",
   "mimetype": "application/julia",
   "name": "julia",
   "version": "1.0.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
